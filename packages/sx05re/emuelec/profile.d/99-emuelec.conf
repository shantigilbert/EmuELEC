# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2019-present Shanti Gilbert (https://github.com/shantigilbert)

export LD_LIBRARY_PATH="/emuelec/lib:/emuelec/lib32:${LD_LIBRARY_PATH}"
export PATH="/emuelec/scripts:/emuelec/bin:/usr/bin/batocera:/storage/roms/bios/jdk/bin/:${PATH}"
export JAVA_HOME="/storage/roms/bios/jdk/bin/java"

export SDL_GAMECONTROLLERCONFIG_FILE="/storage/.config/SDL-GameControllerDB/gamecontrollerdb.txt"
export EMUELEC="【ツ】"

EE_DIR="/storage/.config/emuelec"
EE_CONF="${EE_DIR}/configs/emuelec.conf"
ES_CONF="/storage/.emulationstation/es_settings.cfg"
EE_DEVICE=$(cat /ee_arch)
EE_LOG="/emuelec/logs/emuelec.log"
RA_CONF="/storage/.config/retroarch/retroarch.cfg"
RR_CONF="/emuelec/configs/retrorun.cfg"

set_ra_setting() {
	local cfgName=$1
	local cfgValue=$2
  local existing=$(get_ra_setting "${cfgName}")
  if [[ -z "${existing}" ]]; then
    echo "${cfgName} = \"${cfgValue}\"" >> ${RA_CONF}
  else
    sed -ie "s|^${cfgName} *= *\".*\" *$|${cfgName} = \"${cfgValue}\"|" ${RA_CONF}
  fi
}

get_ra_setting() {
	local cfgName=$1
	echo $(cat ${RA_CONF} | grep -E "^${cfgName} *=.*$" | cut -d'"' -f2)
}

set_rr_setting() {
	local cfgName=$1
	local cfgValue=$2
  local existing=$(get_rr_setting "${cfgName}")
  if [[ -z "${existing}" ]]; then
    echo "${cfgName} = ${cfgValue}" >> ${RR_CONF}
  else
    sed -ie "s|^${cfgName} *= *.* *$|${cfgName} = ${cfgValue}|" ${RR_CONF}
  fi
}

get_rr_setting() {
	local cfgName=$1
	echo $(cat ${RR_CONF} | grep -E "^${cfgName} *=.*$" | cut -d'=' -f2 | sed 's/^ *//;s/ *$//' )
}

shutdown() {
	echo "enabling small cores"
	/usr/bin/emuelec-utils small-cores enable
	command shutdown $@
}

reboot() {
	echo "enabling small cores"
	/usr/bin/emuelec-utils small-cores enable
	command reboot $@
}

get_resolution() {
# This will return the current video resolution
  echo $( fbset | grep geometry | cut -d$' ' -f2-3 )
}

hide_buffer () {
# Attempt to hide the screen buffer (e.g. terminal text) arg1, 1 = Hides, 0 = Show.
  echo ${1} > /sys/class/graphics/fb1/blank
}

blank_buffer() {
# Clears screen buffer 
  # Blank the buffer.
  echo 1 > /sys/class/graphics/fb0/blank
  dd if=/dev/zero of=/dev/fb0 bs=256K conv=sync,noerror,notrunc > /dev/null 2>&1
  echo 0 > /sys/class/graphics/fb0/blank
  
  # Clears screen buffer 
  # Blank the buffer.
  echo 1 > /sys/class/graphics/fb1/blank
  dd if=/dev/zero of=/dev/fb1 bs=256K conv=sync,noerror,notrunc > /dev/null 2>&1
  echo 0 > /sys/class/graphics/fb1/blank
}

aml_ver() {
# Returns the Amlogic SOC version
if grep -q "Gxl" /proc/device-tree/compatible; then
 echo "Amlogic"
else
 echo "Amlogic-ng"
fi
}

if [ "${EE_DEVICE}" == "Amlogic-ng" ]; then
    EE_DEVICE=$(aml_ver)
fi

get_config_value() {
# Argument ${1} is the config file name.
# Argument ${2} is the config name for the value you want.
# Returns config value for the specified name.
# Example: get_config_value "/flash/config.ini" "hdmimode"

CFG_FILE="${1}"
CFG_NAME="${2}"

[[ ! -s "${CFG_FILE}" ]] && return

CFG_PAT="^${CFG_NAME}='(.*)'"
CFG_TMP=$(cat "${CFG_FILE}" | grep -oE "${CFG_PAT}")
CFG_TMP="${CFG_TMP##*=}"
if [ ! -z "${CFG_TMP}" ]; then
  # Strips the config value of single and double quotes.
  CFG_VAL=$(echo ${CFG_TMP} | sed -e "s/^['\"]//" -e "s/['\"]$//")
  echo ${CFG_VAL}
fi

}

get_ee_setting() {
# Argument ${1} is the setting name, EmuELEC settings alway start with ee_ e.g. ee_novideo
# Usage: get_ee_setting setting [platform] [rom]
# Only the setting argument is required 
# Priority is: GAME, PLATFORM, GLOBAL, EE_SETTING if at any point one returns 0 it means its dissabled, if it returns empty it will continue onto the next one. 

SETTING="${1}"
PLATFORM="${2}"
ROM="${3}"

#ROM
ROM=$(echo [\"${ROM}\"] | sed -e 's|\[|\\\[|g' | sed -e 's|\]|\\\]|g' | sed -e 's|(|\\\(|g' | sed -e 's|)|\\\)|g')
PAT="^${PLATFORM}${ROM}[.-]${SETTING}=(.*)"
EES=$(cat "${EE_CONF}" | grep -oE "${PAT}")
EES="${EES##*=}"


if [ -z "${EES}" ]; then
#PLATFORM
PAT="^${PLATFORM}[.-]${SETTING}=(.*)"
	EES=$(cat "${EE_CONF}" | grep -oE "${PAT}")
	EES="${EES##*=}"
fi

if [ -z "${EES}" ]; then
#GLOBAL
PAT="^global[.-]${SETTING}=(.*)"
	EES=$(cat "${EE_CONF}" | grep -oE "${PAT}")
	EES="${EES##*=}"
fi

if [ -z "${EES}" ]; then
#EE_SETTINGS
PAT="^${SETTING}=(.*)"
	EES=$(cat "${EE_CONF}" | grep -oE "${PAT}")
	EES="${EES##*=}"
fi

echo "${EES}"	
}

set_ee_setting() {
# argument ${1} is the setting name e.g. nes.integerscale. ${2} is the value, e.g "1"

# Does the setting exists? if yes edit in place, else add it
if grep -Eq "^[\#]?${1}=" "${EE_CONF}"; then
    [ "${2}" == "disable" ] && sed -Ei "s|^[\#]?${1}=.*|^\#${1}=|" "${EE_CONF}" || sed -Ei "s|^[\#]?${1}=.*|${1}=${2//&/\\&}|" "${EE_CONF}"
else 
    sed -i "/${1}=/d" "${EE_CONF}"
	[ "${2}" == "disable" ] && echo "#${1}=" >> "${EE_CONF}" || echo "${1}=${2}" >> "${EE_CONF}"
fi
}

set_audio() { 
# sets up audio output, options are, default, alsa or pulseaudio
if [ "${1}" == "default" ]; then
	if [ "${EE_DEVICE}" == "Amlogic-old" ] || [[ $(tr -d '\0' </proc/device-tree/coreelec-dt-id) == *"gxl_"* ]] ; then
	[ "$(get_ee_setting ee_alsa.always)" == 1 ] && AUDIO="alsa" || AUDIO="pulseaudio" 
	else
		AUDIO="alsa"
	fi
else
	AUDIO=${1}
fi
rr_audio.sh ${AUDIO}
}

get_es_setting() { 
# Returns the value of the requested Emulationstation setting in es_settings.cfg
	echo $(sed -n "s|\s*<${1} name=\"${2}\" value=\"\(.*\)\" />|\1|p" ${ES_CONF})
}

init_game() {
	echo 1 > /tmp/game.running
}

end_game() {
	rm /tmp/game.running
}

init_port() {
# Initialize port settings, this gets called by the ports scripts, or should.
# ${1} is the binary to kill
# ${2} is the kill signal to send

if pgrep gptokeyb -f; then
        killall gptokeyb
fi

local VIRTUAL_KB
GPTOKEYB=$(get_ee_setting "gptokeyb" "ports" "${1}")
[[ -z "${GPTOKEYB}" ]] && GPTOKEYB=${4}
[[ ! -z "${4}" ]] && VIRTUAL_KB=$(emuelec-utils set_gptokeyb "ports" "${GPTOKEYB}")

if [ "${3}" ]; then
    gptokeyb 1 ${1} ${VIRTUAL_KB} -killsignal ${3} &
else
    gptokeyb 1 ${1} ${VIRTUAL_KB} &
fi

set_audio ${2}
cat /etc/motd > "${EE_LOG}"

emuelec-utils init_app_video "ports" "${1}"

}

end_port() {
# End the port execution and set/kill anything that is needed
set_audio default

emuelec-utils end_app_video

kill_video_controls

# for some reason head sometimes does not exit
killall head
}

# maxperf and normpef are used to change gov to performance or return to ondemand	
maxperf() {
	if [ "${EE_DEVICE}" == "OdroidGoAdvance" ] || [ "${EE_DEVICE}" == "GameForce" ]; then
		echo performance > /sys/devices/platform/ff400000.gpu/devfreq/ff400000.gpu/governor
		echo performance > /sys/devices/platform/dmc/devfreq/dmc/governor
		echo performance > /sys/devices/system/cpu/cpufreq/policy0/scaling_governor
	else
		echo "performance" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
		echo "performance" > /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor
		echo 5 > /sys/class/mpgpu/cur_freq
	fi
}

normperf() {
	if [ "${EE_DEVICE}" == "OdroidGoAdvance" ] || [ "${EE_DEVICE}" == "GameForce" ]; then
		echo simple_ondemand > /sys/devices/platform/ff400000.gpu/devfreq/ff400000.gpu/governor
		echo dmc_ondemand > /sys/devices/platform/dmc/devfreq/dmc/governor
		echo interactive > /sys/devices/system/cpu/cpufreq/policy0/scaling_governor
	else
		echo "ondemand" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
		echo "ondemand" > /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor
		echo 1 > /sys/class/mpgpu/cur_freq
	fi	
}

ee_check_bios() {
# Checks that all required bios files are present, will error out if anything is missing. 
PLATFORM="${1}"
CORE="${2}"
EMULATOR="${3}"
ROMNAME="${4}"
LOG="${5}"

if [[ -z "${LOG}" ]]; then
	LOG="${EE_LOG}"
fi

MISSINGBIOS="$(batocera-systems --strictfilter ${PLATFORM})"
if [ "$?" == "2" ]; then

# formating so it looks nice :)
PLATFORMNAME="${MISSINGBIOS##*>}"  # read from -P onwards
PLATFORMNAME="${PLATFORMNAME%%MISSING*}"  # until a space is found
PLATFORMNAME=$(echo ${PLATFORMNAME} | sed -e 's/\\n//g')

if [[ -f "${LOG}" ]]; then
    echo "${CORE} ${EMULATOR} ${ROMNAME}" >> ${LOG}
    echo "${PLATFORMNAME} missing BIOS - Could not find all BIOS: " >> ${LOG}
    echo "please make sure you copied the files into the corresponding folder " >> ${LOG}
    echo "${MISSINGBIOS}" >> ${LOG}
fi
    text_viewer -w -e -t "Error! ${2}" -f 24 ${LOG}
    return 1
else 
    return 0
fi
}

ee_console() {
# enable or disable the terminal console
case "${1}" in
    "enable")   
        echo 0 > /sys/class/vtconsole/vtcon1/bind
        echo 1 > /sys/class/vtconsole/vtcon1/bind
        clear /dev/tty0
    ;;
    "disable")
        clear /dev/tty0
        echo 0 > /sys/class/vtconsole/vtcon1/bind
    ;;
esac
}


oga_ver() { 
DEVICE=$(tr -d '\0' < /proc/device-tree/compatible)

case "${DEVICE}" in
    *"odroidgo3-linux"*)
        echo "OGS"
    ;;
    *"odroidgo2-linux-v11"*)
        echo "OGABE"
    ;;
    *"odroidgo2-linuxrockchip"*)
        echo "OGA"
    ;;
    *"gameforce"*)
        echo "GF"
    ;;
esac
}

set_video_controls() {
#gptokeyb is supposed to be presetup for video controls (keyboard) but this might need to be rechecked
    gptokeyb & > /dev/null 2>&1
}

kill_video_controls() {
    killall gptokeyb & > /dev/null 2>&1
}

dot_delete() {
# We hates MAC hidden files
find "/storage/roms" \( -name ".DS_Store" -o -name "._.DS_Store" -o -name "._*" \) -type f -delete

}

install_java() {
JDKINSTALLED="yes"
JDKDEST="/storage/roms/bios/jdk"
JDKNAME="zulu21.32.17-ca-jdk21.0.2"
CDN="https://cdn.azul.com/zulu/bin"

# Alternate just for reference
#CDN="https://cdn.azul.com/zulu-embedded/bin"

OLDVERSION="$(cat ${JDKDEST}/eeversion 2>/dev/null)"
if [ "${JDKNAME}" != "${OLDVERSION}" ]; then
   JDKINSTALLED="no"
   rm -rf "${JDKDEST}"
fi

mkdir -p "${JDKDEST}"

if [ "${JDKINSTALLED}" == "no" ]; then
echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "No internet connection, exiting..." > /dev/console
    text_viewer -e -w -t "No Internet!" -m "You need to be connected to the internet to download the JDK\nNo internet connection, exiting...";
    exit 1 #No internet
fi

cat >> /tmp/java_install.rc <<EOF
    echo "Downloading JDK please be patient..."
    cd ${JDKDEST}/..
    wget "${CDN}/${JDKNAME}-linux_aarch64.tar.gz"
    echo "Inflating JDK please be patient..."
    tar xvfz ${JDKNAME}-linux_aarch64.tar.gz ${JDKNAME}-linux_aarch64/lib
    tar xvfz ${JDKNAME}-linux_aarch64.tar.gz ${JDKNAME}-linux_aarch64/bin
    tar xvfz ${JDKNAME}-linux_aarch64.tar.gz ${JDKNAME}-linux_aarch64/conf
    rm ${JDKNAME}-linux_aarch64/lib/*.zip
    mv ${JDKNAME}-linux_aarch64/* ${JDKDEST}
    rm -rf ${JDKNAME}-linux_aarch64*
    
    for del in jmods include demo legal man DISCLAIMER LICENSE readme.txt release Welcome.html; do
        rm -rf ${JDKDEST}/\${del}
    done
    echo "${JDKNAME}" > "${JDKDEST}/eeversion"
EOF

    chmod +x /tmp/java_install.rc
    progressor --log "/emuelec/logs/jdk_install.log" --title "Installing JDK, please wait..." "/tmp/java_install.rc" --font "dummy.ttf"
    rm /tmp/java_install.rc
fi
}

playvideolink() {
        [[ -z "${1}" ]] && echo "provide the link." && return
        local VIDEO_FILE="/tmp/video/video.m3u"
        mkdir -p /tmp/video
        echo "${1}" > "${VIDEO_FILE}"
        playvideo.sh "${VIDEO_FILE}" mpv
        rm "${VIDEO_FILE}"
}

# do not edit below this line
# reads other config files from /storage/.config/profile.d
  for config in /storage/.config/profile.d/*; do
    if [ -f "${config}" ] ; then
      . ${config}
    fi
done
